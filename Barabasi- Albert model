import networkx as nx
import random
import matplotlib.pyplot as plt

# Define the Barabási–Albert graph function
def barabasi_albert_graph(n, m, seed=None):
    """Returns a random graph according to the Barabási–Albert preferential attachment model."""
    if m < 1 or m >= n:
        raise nx.NetworkXError(
            "Barabási–Albert network must have m >= 1 and m < n, "
            "m = %d, n = %d" % (m, n)
        )
    if seed is not None:
        random.seed(seed)

    # Add m initial nodes (m0 in Barabási–Albert terminology)
    G = nx.empty_graph(m)
    G.name = "barabasi_albert_graph(%s,%s)" % (n, m)

    # Target nodes for new edges
    targets = list(range(m))

    # List of existing nodes, with nodes repeated once for each adjacent edge
    repeated_nodes = []

    # Start adding the other n-m nodes. The first node is m.
    source = m
    while source < n:
        # Add edges to m nodes from the source.
        G.add_edges_from(zip([source] * m, targets))

        # Add one node to the list for each new edge just created.
        repeated_nodes.extend(targets)

        # And the new node "source" has m edges to add to the list.
        repeated_nodes.extend([source] * m)

        # Now choose m unique nodes from the existing nodes
        # Pick uniformly from repeated_nodes (preferential attachment)
        targets = random.sample(repeated_nodes, m)
        source += 1

    return G

# Generate a Barabási–Albert graph with 100 nodes and 2 edges per new node
G = barabasi_albert_graph(100, 2, seed=42)

# Plot the network
plt.figure(figsize=(8, 8))
pos = nx.kamada_kawai_layout(G)  # Use Kamada-Kawai layout for better visualization
nx.draw(
    G, pos, node_size=50, edge_color="gray", alpha=0.6, with_labels=False
)

# Display the plot
plt.title("Barabási–Albert Network Model")
plt.show()
